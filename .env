# process.env vars set based on NODE_ENV setting, in this order: (see env.js)
#   1. .env                                     - loaded first
#   2. .env.[development|test|production]       - Environment-specific settings.
#   3. .env.local                               - Local overrides. This file is loaded for all environments except test.
#   4. .env.[development|test|production].local - Local overrides of environment-specific settings.
#   5. environment variables                    - never overwritten

####################################################
######### Global settings
####################################################
# see https://ulog.js.org/  modules: ratesFeeder, TickerProvider, statusApi
LOG = DEBUG

####################################################
######### ratesFeeder settings
####################################################

# valid values: http, websocket
PROVIDER_TYPE = websocket

# infura: https://rinkeby.infura.io/v3/ (with trailing slash) or wss://rinkeby.infura.io/ws/v3/
# local: http://localhost:8545 or ws://localhost:8545
PROVIDER_URL = ws://localhost:8545

# for local test with ganache no need to set these.
# for local test against Infura create your own project and set these in .env.local or .env.production.local
# for CI and production set it as env var on CI/production server
# NB: Infura project secret is not supported yet (web3js auth?), use address whitelisting if necessary
# INFURA_PROJECT_ID =

# These are test account setting of account[0] provided by ganache (ran with our hardcoded mnemonic)
#Â If you are using with non ganache then set it in .env.local or as an env variable
ETHEREUM_ACCOUNT = 0x76E7a0aEc3E43211395bBBB6Fa059bD6750F83c3

# this is a local ganache key only - NEVER commit private keys of real accounts! NB: make sure you have a leading 0x
ETHEREUM_PRIVATE_KEY = 0x85b3d743fbe4ec4e2b58947fa5484da7b2f5538b0ae8e655646f94c95d5fb949

# consider setRate ethereum tx failed after this time (in ms)
#    ratesFeeder will try to send setRate again  when  next checkticker triggered. Low value localchain for testing
#    NB: If web3js transactionBlockTimeout: 50 (wss) or transactionPollingTimeout: 480 (http)
#          is not reached for any reason. Normally web3 will timeout sooner, it is just an extra timeout to be 100% we schedule a next check.
SETRATE_TX_TIMEOUT = 5000

# how often compare live ticker prices to decide if Augmint on chain price needs to be updated (in ms). Set to 0 to disable (for tests)
#    NB: ticker prices in state & updated "instantly" each time a trade made on the exchange (via websocket subscriptions )
CHECK_TICKER_PRICE_INTERVAL = 5000

# when to update Augmint rate? A rate update tx will be sent to chain if live ticker price (avg) is lower/higher by this % than current Augmint rate
# in % (i.e. 1 = 1%)
LIVE_PRICE_THRESHOLD_PT = 0.05

# log success with LOG level after how many confirmation
LOG_AS_SUCCESS_AFTER_N_CONFIRMATION = 3

####################################################
######### Ticker Providers settings
####################################################

# how often fetch new ticker info (in ms).
# there is a default value of 2mins in code if it's not set
# you can also override by provider: [COINBASE|KRAKEN|BITSTAMP]_HTTP_POLL_INTERVAL
HTTP_POLL_INTERVAL = 5000

# if fetch fails and next polling gets the same error we don't log again for this amount of time (minutes)
# there is a default value of 120000 (2mins) in code if it's not set
LOG_POLL_ERROR_AGAIN_AFTER_X_MINS = 1

# after how many ms consider a http fetch as timed out
# there is a default of 30000 (30 secs) set in code if it's is not set
HTTP_FETCH_TIMEOUT = 5000

####################################################
######### Status API settings
####################################################
PORT = 3000
# log level for morgan logger. see https://github.com/expressjs/morgan
#  + additional "off" option: not use morgen at all (if production env provides http logging )
STATUSAPI_HTTP_LOG_LEVEL = dev
